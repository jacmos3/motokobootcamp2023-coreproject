import Principal "mo:base/Principal";
import Proposal "./proposal";
import List "mo:base/List";
import Array "mo:base/Array";
import Vote "./vote";

actor dao{
    type Proposal = Proposal.Proposal;
    type Vote = Vote.Vote;
    type List<T> = List.List<T>;
    var proposalId : Nat = 0;
    var voteId : Nat = 0;
    var proposalList : List<Proposal> = null;
    var voteList : List<Vote> = null;

    // This function get in inputs the proposal data and add it to the list
    public shared ({caller}) func submit_proposal(_title : Text, _description : Text) : async Nat{
        // I generate a new proposal Id
        proposalId := await Proposal.generateNewId(proposalId);
        
        // I create a new proposal with the input data and the Id
        let p : Proposal = Proposal.createProposal(proposalId, _title, _description, caller);

        // I add the proposal to the list
        proposalList :=  List.push(p, proposalList);

        // I return the proposalId to the user
        proposalId;
    };

    // Returns an array of size 1 if the proposal is found given the input Id, size 0 otherwise.
    public query func get_proposal(proposalId : Nat) : async [Proposal]{
        let findId = func (x : Proposal) : Bool { x.id  == proposalId };
        Array.filter(List.toArray(proposalList), findId);
    };

    // Returns an array with size 0 if no proposals are set, size n otherwise, depending on the number of the proposals
    public query func get_all_proposals() : async [Proposal]{
        List.toArray(proposalList);
    };

    // This function casts the user vote to a specific proposal
    public shared ({caller}) func vote(_proposalId : Nat, _vote: Bool) : async Nat{
        // I generate a new vote Id
        voteId := await Vote.generateNewId(voteId);
        
        // I create a new vote with the input data and the autogenerated voteId
        let v : Vote = Vote.createVote(voteId, _proposalId, caller, _vote);
        
        // I add the vote to the list
        voteList :=  List.push(v, voteList);

        // I return the voteId to the user as confirmation
        voteId;
    };

   
};